public double Armor
{
    get
    {
        if (!(Type == ItemType.Armor || Type == ItemType.Shoulder || Type == ItemType.Hand || Type == ItemType.Feet))
            return 0;

        double typeBonus = Type == ItemType.Armor ? 1.0 : 0.5;

        double materialBonus = 0;
        switch (Material)
        {
            case 23:
            case 25:
                materialBonus = 0.075;
                break;
            case 19:
            case 26:
            case 27:
                materialBonus = 0.85; // might need to expand the precision here
                break;
            case 18:
                materialBonus = 0.80; // might need to expand the precision here
                break;
        }

        double effect = CalculateLevelEffectValue(Level + UpgradeList.Used / 10.0, Rarity);
        return effect * typeBonus * materialBonus;
    }
}

public double Critical
{
    get
    {
        if (!(Type == ItemType.Amulet || Type == ItemType.Ring || Type == ItemType.Weapon ||
              Type == ItemType.Armor || Type == ItemType.Shoulder || Type == ItemType.Hand ||
              Type == ItemType.Feet))
        {
            return 0;
        }

        double typeBonus = 0.05;
        if (Type == ItemType.Weapon && (Subtype == 15 || Subtype == 16 || Subtype == 17 ||
                          Subtype == 5 || Subtype == 10 || Subtype == 11 ||
                          Subtype == 18 || Subtype == 8 || Subtype == 6 || Subtype == 7)
            || Type == ItemType.Armor)
        {
            typeBonus = 0.1;
        }

        double modifierBonus = 1.0 - ((Modifier % 21) / 20.0);
        if (Material == 11)
        {
            modifierBonus += 1.0;
        }

        double effect = CalculateLevelEffectPercent(Level, Rarity);
        double result = effect * typeBonus * modifierBonus;

        return Math.Abs(result) < 0.001 ? 0 : result;
    }
}

public double Life
{
    get
    {
        if (!(Type == ItemType.Weapon || Type == ItemType.Armor ||
              Type == ItemType.Shoulder || Type == ItemType.Hand || Type == ItemType.Feet))
        {
            return 0;
        }

        double typeBonus = Type == ItemType.Armor ? 1.0 : 0.5;
        double modifierBonus = (1.0 - ((Modifier % 21) / 20.0)) + 1.0;

        switch (Material)
        {
            case 1:
                modifierBonus += 1.0;
                break;
            case 26:
                modifierBonus += 0.5;
                break;
            case 27:
                modifierBonus += 0.75;
                break;
        }

        double effect = CalculateLevelEffectValue(Level + UpgradeList.Used / 10.0, Rarity);
        return effect * 5.0 * typeBonus * modifierBonus;
    }
}

public double Regeneration
{
    get
    {
        if (!(Type == ItemType.Weapon || Type == ItemType.Armor ||
              Type == ItemType.Shoulder || Type == ItemType.Hand || Type == ItemType.Feet))
        {
            return 0;
        }

        double typeBonus = Type == ItemType.Armor ? 0.2 : 0.1;
        double modifierBonus = (Modifier % 21) / 20.0;

        switch (Material)
        {
            case 26:
                modifierBonus += 0.5;
                break;
            case 27:
                modifierBonus += 1.0;
                break;
        }

        double effect = CalculateLevelEffectValue(Level + UpgradeList.Used / 10.0, Rarity);
        return effect * typeBonus * modifierBonus;
    }
}

public double Resistance
{
    get
    {
        if (!(Type == ItemType.Armor || Type == ItemType.Shoulder || Type == ItemType.Hand || Type == ItemType.Feet))
            return 0;

        double typeBonus = Type == ItemType.Armor ? 1.0 : 0.5;

        double materialBonus = 0;
        switch (Material)
        {
            case 1:
            case 19:
                materialBonus = 0.85;
                break;
            case 26:
            case 27:
                materialBonus = 0.75;
                break;
        }

        double effect = CalculateLevelEffectValue(Level + UpgradeList.Used / 10.0, Rarity);
        return effect * typeBonus * materialBonus;
    }
}

public double Tempo
{
    get
    {
        if (!(Type == ItemType.Amulet || Type == ItemType.Ring || Type == ItemType.Weapon ||
              Type == ItemType.Armor || Type == ItemType.Shoulder || Type == ItemType.Hand ||
              Type == ItemType.Feet))
        {
            return 0;
        }

        double typeBonus = 0.1;
        if (Type == ItemType.Weapon && (Subtype == 15 || Subtype == 16 || Subtype == 17 ||
                          Subtype == 5 || Subtype == 10 || Subtype == 11 ||
                          Subtype == 18 || Subtype == 8 || Subtype == 6 || Subtype == 7)
            || Type == ItemType.Armor)
        {
            typeBonus = 0.2;
        }

        double modifierBonus = (Modifier % 21) / 20.0;
        if (Material == 12)
        {
            modifierBonus += 1.0;
        }

        double effect = CalculateLevelEffectPercent(Level, Rarity);
        double result = effect * typeBonus * modifierBonus;

        return Math.Abs(result) < 0.001 ? 0 : result;

    }
}

public double Damage
{
    get
    {
        if (Type != ItemType.Weapon)
            return 0;

        double damageBonus = 4.0;
        switch (Subtype)
        {
            case 3:
            case 4:
                damageBonus = 2.0;
                break;
            case 5:
                damageBonus = 4.0;
                break;
            case 13:
                damageBonus = 2.0;
                break;
            case 15:
            case 16:
            case 17:
            case 10:
            case 11:
            case 18:
            case 8:
            case 6:
            case 7:
                damageBonus = 8.0;
                break;
        }

        double effect = CalculateLevelEffectValue(Level + UpgradeList.Used / 10.0, Rarity);
        return effect * damageBonus;
    }
}

private static double CalculateLevelEffectValue(double level, int rarity)
{
    double a = 3.0 * (1.0 - (1.0 / (1.0 + ((level - 1.0) / 20.0))));
    double b = rarity / 4.0;
    double result = Math.Pow(2, a) * Math.Pow(2, b);

    return result;
}

private static double CalculateLevelEffectPercent(double level, int rarity)
{
    double a = 3.0 * (1.0 - (1.0 / (1.0 + ((level - 1.0) / 20.0))));
    double b = rarity / 4.0;
    double c = 3.0;
    double result = Math.Pow(2, a) * Math.Pow(2, b) / Math.Pow(2, c);

    return result;
}